#!/usr/bin/env python3
"""
Script pour cr√©er la structure organis√©e des agents par d√©partement

Chaque agent aura:
- Son propre dossier dans son d√©partement
- base_prompt.md avec son prompt de base
- memory.json pour sa m√©moire interne
- __init__.py qui importe l'agent depuis cortex/agents/
"""

import os
from pathlib import Path
import json

# Mapping agents ‚Üí d√©partements
AGENT_STRUCTURE = {
    'intelligence': {
        'description': 'Recherche, Analyse, D√©tection',
        'agents': {
            'git_watcher': {
                'name': 'GitWatcherAgent',
                'file': 'git_watcher_agent.py',
                'role': 'Git Change Detection & Analysis',
                'tier': 'NANO',
                'description': 'D√©tecte et analyse les changements Git pour d√©clencher workflows'
            },
            'context': {
                'name': 'ContextAgent',
                'file': 'context_agent.py',
                'role': 'Context Preparation',
                'tier': 'DEEPSEEK',
                'description': 'Pr√©pare le contexte pertinent pour les agents'
            },
            'tooler': {
                'name': 'ToolerAgent',
                'file': 'tooler_agent.py',
                'role': 'Tool Research',
                'tier': 'DEEPSEEK',
                'description': 'Recherche outils, packages et solutions externes'
            }
        }
    },
    'maintenance': {
        'description': 'Maintenance Syst√®me, Harmonisation',
        'agents': {
            'maintenance': {
                'name': 'MaintenanceAgent',
                'file': 'maintenance_agent.py',
                'role': 'System Maintenance',
                'tier': 'DEEPSEEK',
                'description': 'Ex√©cute plans d\'harmonisation et maintient le syst√®me'
            },
            'harmonization': {
                'name': 'HarmonizationAgent',
                'file': 'harmonization_agent.py',
                'role': 'Architecture Harmonization',
                'tier': 'GPT5',
                'description': 'G√©n√®re plans d\'harmonisation architecturale (planning uniquement)'
            },
            'archivist': {
                'name': 'ArchivistAgent',
                'file': 'archivist_agent.py',
                'role': 'Reports & Archives',
                'tier': 'DEEPSEEK',
                'description': 'G√©n√®re rapports et maintient archives syst√®me'
            }
        }
    },
    'communication': {
        'description': 'Communication, Routage',
        'agents': {
            'communications': {
                'name': 'CommunicationsAgent',
                'file': 'communications_agent.py',
                'role': 'User Communications',
                'tier': 'NANO',
                'description': 'R√©sume workflows avec thinking transparent pour l\'utilisateur'
            },
            'triage': {
                'name': 'TriageAgent',
                'file': 'triage_agent.py',
                'role': 'Request Routing',
                'tier': 'NANO',
                'description': 'Routage initial des requ√™tes utilisateur'
            },
            'smart_router': {
                'name': 'SmartRouterAgent',
                'file': 'smart_router_agent.py',
                'role': 'Department Routing',
                'tier': 'NANO',
                'description': 'Route requ√™tes vers d√©partements appropri√©s'
            }
        }
    },
    'optimization': {
        'description': 'Qualit√©, Tests, Performance',
        'agents': {
            'quality_control': {
                'name': 'QualityControlAgent',
                'file': 'quality_control_agent.py',
                'role': 'Quality Evaluation',
                'tier': 'DEEPSEEK',
                'description': '√âvalue qualit√© des r√©sultats et d√©tecte probl√®mes'
            },
            'tester': {
                'name': 'TesterAgent',
                'file': 'tester_agent.py',
                'role': 'Test Analysis & Validation',
                'tier': 'DEEPSEEK',
                'description': 'D√©termine besoins en tests (base_prompt logic) et valide code'
            }
        }
    },
    'execution': {
        'description': 'Planification, Ex√©cution T√¢ches',
        'agents': {
            'planner': {
                'name': 'PlannerAgent',
                'file': 'planner_agent.py',
                'role': 'Task Planning',
                'tier': 'DEEPSEEK',
                'description': 'Planifie d√©composition et ex√©cution des t√¢ches'
            },
            'quick_actions': {
                'name': 'QuickActionsAgent',
                'file': 'quick_actions_agent.py',
                'role': 'Atomic Operations',
                'tier': 'NANO',
                'description': 'Ex√©cute actions rapides et atomiques'
            }
        }
    }
}


def create_base_prompt(agent_info):
    """G√©n√®re le base_prompt.md pour un agent"""
    return f"""# {agent_info['name']} - Base Prompt

## Role
**{agent_info['role']}**

## Tier
**{agent_info['tier']}**

## Description
{agent_info['description']}

## Core Responsibilities

[√Ä d√©finir: Listez les responsabilit√©s cl√©s de cet agent]

## Decision Logic (Base Prompt)

[√Ä d√©finir: Logique de d√©cision de base sans LLM - r√®gles explicites]

## Trigger Conditions

[√Ä d√©finir: Quand cet agent doit √™tre activ√©]

## Input Requirements

[√Ä d√©finir: Quel contexte/donn√©es l'agent n√©cessite]

## Output Format

[√Ä d√©finir: Format de sortie attendu]

## Escalation Criteria

[√Ä d√©finir: Quand escalader vers tier sup√©rieur]

## Examples

### Example 1
**Input:** [Description]
**Processing:** [√âtapes]
**Output:** [R√©sultat]

### Example 2
**Input:** [Description]
**Processing:** [√âtapes]
**Output:** [R√©sultat]

## Memory Management

Cet agent utilise `memory.json` pour stocker:
- Historique des ex√©cutions
- Patterns d√©tect√©s
- D√©cisions ant√©rieures
- M√©triques de performance

## Integration Points

- **Upstream:** [Quels agents l'appellent]
- **Downstream:** [Quels agents il appelle]
- **Services:** [Services/repos utilis√©s]

## Notes

[Notes additionnelles, limitations connues, am√©liorations futures]
"""


def create_memory_schema():
    """Sch√©ma de base pour memory.json"""
    return {
        "version": "1.0.0",
        "last_updated": None,
        "execution_history": [],
        "learned_patterns": {},
        "performance_metrics": {
            "total_executions": 0,
            "successful_executions": 0,
            "failed_executions": 0,
            "avg_execution_time": 0.0,
            "total_cost": 0.0
        },
        "state": {},
        "notes": []
    }


def create_agent_init(agent_info):
    """Cr√©e __init__.py qui importe l'agent"""
    return f'''"""
{agent_info['name']} - {agent_info['role']}

Auto-generated import from cortex.agents.{agent_info['file'].replace('.py', '')}
"""

from cortex.agents.{agent_info['file'].replace('.py', '')} import {agent_info['name']}, create_{agent_info['file'].replace('_agent.py', '_agent')}

__all__ = ['{agent_info['name']}', 'create_{agent_info['file'].replace('_agent.py', '_agent')}']
'''


def create_readme(department, dept_info):
    """Cr√©e README.md pour le d√©partement"""
    agents_list = '\n'.join([
        f"- **{info['name']}** ({info['tier']}): {info['description']}"
        for info in dept_info['agents'].values()
    ])

    return f"""# {department.title()} Department

{dept_info['description']}

## Agents

{agents_list}

## Structure

```
{department}/
  agents/
    [agent_name]/
      base_prompt.md  # Prompt de base et logique
      memory.json     # M√©moire interne persistante
      __init__.py     # Import depuis cortex/agents/
```

## Philosophy

Chaque agent dans ce d√©partement a:
- **Autonomie**: Son propre dossier avec prompt et m√©moire
- **Sp√©cialisation**: R√¥le clair dans le d√©partement
- **Tra√ßabilit√©**: Historique d'ex√©cutions dans memory.json
- **√âvolution**: Base prompt √©volutif selon apprentissages

## Memory System

La m√©moire interne (`memory.json`) stocke:
- Historique des ex√©cutions
- Patterns d√©tect√©s au fil du temps
- D√©cisions ant√©rieures et leur contexte
- M√©triques de performance

Cette m√©moire permet aux agents d'apprendre et de s'am√©liorer.
"""


def setup_structure():
    """Cr√©e toute la structure des agents par d√©partement"""
    base_path = Path('cortex/departments')

    print("üèóÔ∏è  Setting up agent structure by department...\n")

    for department, dept_info in AGENT_STRUCTURE.items():
        print(f"üìÅ {department.upper()} Department")
        print(f"   {dept_info['description']}")

        # Cr√©er dossier d√©partement si n'existe pas
        dept_path = base_path / department
        dept_path.mkdir(parents=True, exist_ok=True)

        # Cr√©er README du d√©partement
        readme_path = dept_path / 'README.md'
        readme_path.write_text(create_readme(department, dept_info))
        print(f"   ‚úì {readme_path}")

        # Cr√©er dossier agents
        agents_path = dept_path / 'agents'
        agents_path.mkdir(exist_ok=True)

        # Cr√©er __init__.py pour agents/
        agents_init = agents_path / '__init__.py'
        agents_init.write_text(f'"""{department.title()} Department Agents"""\n')
        print(f"   ‚úì {agents_init}")

        # Cr√©er chaque agent
        for agent_name, agent_info in dept_info['agents'].items():
            agent_path = agents_path / agent_name
            agent_path.mkdir(exist_ok=True)

            # base_prompt.md
            prompt_path = agent_path / 'base_prompt.md'
            prompt_path.write_text(create_base_prompt(agent_info))
            print(f"   ‚úì {prompt_path}")

            # memory.json
            memory_path = agent_path / 'memory.json'
            memory_path.write_text(json.dumps(create_memory_schema(), indent=2))
            print(f"   ‚úì {memory_path}")

            # __init__.py
            init_path = agent_path / '__init__.py'
            init_path.write_text(create_agent_init(agent_info))
            print(f"   ‚úì {init_path}")

        print()

    print("‚úÖ Agent structure setup complete!")
    print("\nüìä Summary:")
    for department, dept_info in AGENT_STRUCTURE.items():
        print(f"   {department}: {len(dept_info['agents'])} agents")
    print(f"\n   Total: {sum(len(d['agents']) for d in AGENT_STRUCTURE.values())} agents across {len(AGENT_STRUCTURE)} departments")


if __name__ == '__main__':
    setup_structure()
